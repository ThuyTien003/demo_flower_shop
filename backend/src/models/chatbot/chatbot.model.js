import pool from '../../config/db.config.js';

const Chatbot = {
  // Create or get conversation
  async getOrCreateConversation(userId, sessionId) {
    // Try to find active conversation
    const [existing] = await pool.execute(
      'SELECT * FROM chat_conversations WHERE session_id = ? AND is_active = 1 ORDER BY started_at DESC LIMIT 1',
      [sessionId]
    );

    if (existing.length > 0) {
      return existing[0];
    }

    // Create new conversation
    const [result] = await pool.execute(
      'INSERT INTO chat_conversations (user_id, session_id) VALUES (?, ?)',
      [userId || null, sessionId]
    );

    const [newConv] = await pool.execute(
      'SELECT * FROM chat_conversations WHERE conversation_id = ?',
      [result.insertId]
    );

    return newConv[0];
  },

  // Save message
  async saveMessage(conversationId, senderType, message, intent = null, confidence = null) {
    const [result] = await pool.execute(
      'INSERT INTO chat_messages (conversation_id, sender_type, message, intent, confidence) VALUES (?, ?, ?, ?, ?)',
      [conversationId, senderType, message, intent, confidence]
    );

    return result.insertId;
  },

  // Get conversation history
  async getConversationHistory(conversationId, limit = 20) {
    const nLimit = Number(limit) || 20;
    const [messages] = await pool.execute(
      `SELECT * FROM chat_messages 
       WHERE conversation_id = ? 
       ORDER BY created_at DESC 
       LIMIT ${nLimit}`,
      [conversationId]
    );

    return messages.reverse();
  },

  // Save product recommendation
  async saveRecommendation(messageId, productId, reason, score) {
    await pool.execute(
      'INSERT INTO chat_recommendations (message_id, product_id, reason, score) VALUES (?, ?, ?, ?)',
      [messageId, productId, reason, score]
    );
  },

  // Get recommendations for a message
  async getRecommendations(messageId) {
    const [recs] = await pool.execute(
      `SELECT cr.*, p.name, p.price, p.slug,
              (SELECT image_url FROM product_images WHERE product_id = p.product_id AND is_primary = 1 LIMIT 1) as image_url
       FROM chat_recommendations cr
       JOIN products p ON cr.product_id = p.product_id
       WHERE cr.message_id = ?
       ORDER BY cr.score DESC`,
      [messageId]
    );

    return recs;
  },

  // Search flower knowledge
  async searchFlowerKnowledge(keywords) {
    const searchTerms = keywords.toLowerCase().split(' ').filter(k => k.length > 2);
    
    if (searchTerms.length === 0) {
      return [];
    }

    const conditions = searchTerms.map(() => 
      '(LOWER(flower_name) LIKE ? OR LOWER(occasion) LIKE ? OR LOWER(keywords) LIKE ? OR LOWER(meaning) LIKE ?)'
    ).join(' OR ');

    const params = searchTerms.flatMap(term => {
      const like = `%${term}%`;
      return [like, like, like, like];
    });

    const [results] = await pool.execute(
      `SELECT * FROM flower_knowledge WHERE ${conditions} LIMIT 10`,
      params
    );

    return results;
  },

  // Get user purchase history
  async getUserPurchaseHistory(userId, limit = 10) {
    const nLimit = Number(limit) || 10;
    const [orders] = await pool.execute(
      `SELECT DISTINCT
         p.product_id,
         p.name,
         p.slug,
         p.price,
         p.category_id,
         c.name as category_name,
         COUNT(oi.order_item_id) as purchase_count,
         SUM(oi.quantity) as total_quantity,
         MAX(o.order_date) as last_purchase_date,
         (SELECT image_url FROM product_images WHERE product_id = p.product_id AND is_primary = 1 LIMIT 1) as image_url
       FROM orders o
       JOIN order_items oi ON o.order_id = oi.order_id
       JOIN products p ON oi.product_id = p.product_id
       JOIN categories c ON p.category_id = c.category_id
       WHERE o.user_id = ? AND o.status NOT IN ('cancelled')
       GROUP BY p.product_id
       ORDER BY last_purchase_date DESC, purchase_count DESC
       LIMIT ${nLimit}`,
      [userId]
    );

    return orders;
  },

  // Get recommended products based on purchase history
  async getRecommendedProducts(userId, limit = 5) {
    // Get user's purchase history
    const purchaseHistory = await this.getUserPurchaseHistory(userId, 20);
    
    if (purchaseHistory.length === 0) {
      // Return popular products if no history
      const nLimit = Number(limit) || 5;
      const [popular] = await pool.execute(
        `SELECT 
           p.product_id,
           p.name,
           p.slug,
           p.price,
           p.description,
           c.name as category_name,
           (SELECT image_url FROM product_images WHERE product_id = p.product_id AND is_primary = 1 LIMIT 1) as image_url,
           COUNT(oi.order_item_id) as order_count
         FROM products p
         JOIN categories c ON p.category_id = c.category_id
         LEFT JOIN order_items oi ON p.product_id = oi.product_id
         WHERE p.is_active = 1 AND p.stock_quantity > 0
         GROUP BY p.product_id
         ORDER BY order_count DESC
         LIMIT ${nLimit}`,
        []
      );
      return popular;
    }

    // Get category IDs from purchase history
    const categoryIds = [...new Set(purchaseHistory.map(p => p.category_id))];
    const purchasedProductIds = purchaseHistory.map(p => p.product_id);

    // Find similar products from same categories that user hasn't bought
    const placeholders = categoryIds.map(() => '?').join(',');
    const excludePlaceholders = purchasedProductIds.map(() => '?').join(',');

    const nLimit = Number(limit) || 5;
    const [recommended] = await pool.execute(
      `SELECT 
         p.product_id,
         p.name,
         p.slug,
         p.price,
         p.description,
         c.name as category_name,
         (SELECT image_url FROM product_images WHERE product_id = p.product_id AND is_primary = 1 LIMIT 1) as image_url,
         COUNT(oi.order_item_id) as order_count
       FROM products p
       JOIN categories c ON p.category_id = c.category_id
       LEFT JOIN order_items oi ON p.product_id = oi.product_id
       WHERE p.category_id IN (${placeholders})
         AND p.product_id NOT IN (${excludePlaceholders})
         AND p.is_active = 1
         AND p.stock_quantity > 0
       GROUP BY p.product_id
       ORDER BY order_count DESC, p.created_at DESC
       LIMIT ${nLimit}`,
      [...categoryIds, ...purchasedProductIds]
    );

    return recommended;
  },

  // Save user preference
  async saveUserPreference(userId, preferenceType, preferenceValue, confidence = 1.0) {
    // Check if preference exists
    const [existing] = await pool.execute(
      'SELECT * FROM user_preferences WHERE user_id = ? AND preference_type = ?',
      [userId, preferenceType]
    );

    if (existing.length > 0) {
      // Update existing preference
      await pool.execute(
        'UPDATE user_preferences SET preference_value = ?, confidence = ?, updated_at = CURRENT_TIMESTAMP WHERE preference_id = ?',
        [preferenceValue, confidence, existing[0].preference_id]
      );
    } else {
      // Insert new preference
      await pool.execute(
        'INSERT INTO user_preferences (user_id, preference_type, preference_value, confidence) VALUES (?, ?, ?, ?)',
        [userId, preferenceType, preferenceValue, confidence]
      );
    }
  },

  // Get user preferences
  async getUserPreferences(userId) {
    const [prefs] = await pool.execute(
      'SELECT * FROM user_preferences WHERE user_id = ? ORDER BY updated_at DESC',
      [userId]
    );

    return prefs;
  },

  // Analyze intent from user message
  analyzeIntent(message) {
    const lowerMsg = message.toLowerCase();
    
    // Intent patterns
    const intents = {
      greeting: /^(xin ch√†o|ch√†o|hello|hi|hey)/i,
      recommendation: /(g·ª£i √Ω|t∆∞ v·∫•n|gi·ªõi thi·ªáu|n√™n mua|ƒë·ªÅ xu·∫•t|recommend)/i,
      occasion: /(sinh nh·∫≠t|valentine|k·ª∑ ni·ªám|c∆∞·ªõi|ƒë√°m c∆∞·ªõi|khai tr∆∞∆°ng|chia bu·ªìn|thƒÉm b·ªánh|ng√†y c·ªßa m·∫π|20\/10|8\/3)/i,
      flower_type: /(hoa h·ªìng|hoa ly|hoa c√∫c|hoa tulip|hoa lan|hoa h∆∞·ªõng d∆∞∆°ng|hoa c·∫©m ch∆∞·ªõng|rose|lily|orchid)/i,
      price: /(gi√°|bao nhi√™u|price|cost|budget|ng√¢n s√°ch)/i,
      care: /(chƒÉm s√≥c|c√°ch chƒÉm|b·∫£o qu·∫£n|gi·ªØ t∆∞∆°i|care)/i,
      meaning: /(√Ω nghƒ©a|t∆∞·ª£ng tr∆∞ng|bi·ªÉu t∆∞·ª£ng|meaning|symbolize)/i,
      order: /(ƒë·∫∑t h√†ng|mua|order|buy|cart|gi·ªè h√†ng)/i,
      help: /(gi√∫p|help|h·ªó tr·ª£|support)/i
    };

    let detectedIntent = 'general';
    let confidence = 0.5;

    for (const [intent, pattern] of Object.entries(intents)) {
      if (pattern.test(lowerMsg)) {
        detectedIntent = intent;
        confidence = 0.8;
        break;
      }
    }

    return { intent: detectedIntent, confidence };
  },

  // Generate bot response
  async generateResponse(message, userId, conversationId) {
    const { intent, confidence } = this.analyzeIntent(message);
    let response = '';
    let recommendations = [];

    switch (intent) {
      case 'greeting':
        response = 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω t∆∞ v·∫•n hoa c·ªßa shop. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n' +
                   'üå∏ T∆∞ v·∫•n ch·ªçn hoa ph√π h·ª£p theo d·ªãp\n' +
                   'üíê G·ª£i √Ω s·∫£n ph·∫©m d·ª±a tr√™n s·ªü th√≠ch\n' +
                   'üå∫ H∆∞·ªõng d·∫´n chƒÉm s√≥c hoa\n' +
                   'üåπ Gi·∫£i th√≠ch √Ω nghƒ©a c√°c lo√†i hoa\n\n' +
                   'B·∫°n c·∫ßn t∆∞ v·∫•n g√¨ v·ªÅ hoa ·∫°?';
        break;

      case 'recommendation':
        if (userId) {
          const recommended = await this.getRecommendedProducts(userId, 4);
          if (recommended.length > 0) {
            response = 'D·ª±a tr√™n l·ªãch s·ª≠ mua h√†ng c·ªßa b·∫°n, t√¥i xin g·ª£i √Ω nh·ªØng s·∫£n ph·∫©m sau:';
            recommendations = recommended;
          } else {
            response = 'T√¥i c√≥ th·ªÉ g·ª£i √Ω hoa cho b·∫°n! B·∫°n mu·ªën mua hoa cho d·ªãp g√¨? (V√≠ d·ª•: sinh nh·∫≠t, valentine, khai tr∆∞∆°ng...)';
          }
        } else {
          response = 'T√¥i c√≥ th·ªÉ g·ª£i √Ω hoa cho b·∫°n! B·∫°n mu·ªën mua hoa cho d·ªãp g√¨? (V√≠ d·ª•: sinh nh·∫≠t, valentine, khai tr∆∞∆°ng...)';
        }
        break;

      case 'occasion':
        const knowledge = await this.searchFlowerKnowledge(message);
        if (knowledge.length > 0) {
          const flower = knowledge[0];
          response = `üå∏ **${flower.flower_name}** r·∫•t ph√π h·ª£p!\n\n` +
                     `‚ú® **√ù nghƒ©a:** ${flower.meaning}\n` +
                     `üé® **M√†u s·∫Øc:** ${flower.color_significance}\n` +
                     `üí∞ **Gi√°:** ${flower.price_range}\n\n` +
                     `B·∫°n c√≥ mu·ªën xem c√°c s·∫£n ph·∫©m ${flower.flower_name} kh√¥ng?`;
          
          // Find products matching this flower
          const [products] = await pool.execute(
            `SELECT p.product_id, p.name, p.slug, p.price, p.description,
                    (SELECT image_url FROM product_images WHERE product_id = p.product_id AND is_primary = 1 LIMIT 1) as image_url
             FROM products p
             WHERE LOWER(p.name) LIKE ? AND p.is_active = 1 AND p.stock_quantity > 0
             LIMIT 4`,
            [`%${flower.flower_name.toLowerCase()}%`]
          );
          recommendations = products;
        } else {
          response = 'T√¥i c√≥ th·ªÉ t∆∞ v·∫•n hoa cho nhi·ªÅu d·ªãp kh√°c nhau nh∆∞:\n\n' +
                     'üíï Sinh nh·∫≠t, Valentine, K·ª∑ ni·ªám\n' +
                     'üíí ƒê√°m c∆∞·ªõi\n' +
                     'üéâ Khai tr∆∞∆°ng\n' +
                     'üôè Chia bu·ªìn, ThƒÉm b·ªánh\n' +
                     'üë© Ng√†y c·ªßa M·∫π, 20/10, 8/3\n\n' +
                     'B·∫°n c·∫ßn hoa cho d·ªãp n√†o?';
        }
        break;

      case 'flower_type':
        const flowerKnowledge = await this.searchFlowerKnowledge(message);
        if (flowerKnowledge.length > 0) {
          const flower = flowerKnowledge[0];
          response = `üå∏ **${flower.flower_name}**\n\n` +
                     `‚ú® **√ù nghƒ©a:** ${flower.meaning}\n` +
                     `üé® **M√†u s·∫Øc:** ${flower.color_significance}\n` +
                     `üå± **ChƒÉm s√≥c:** ${flower.care_tips}\n` +
                     `üìÖ **M√πa:** ${flower.season}\n` +
                     `üí∞ **Gi√°:** ${flower.price_range}\n\n` +
                     `Ph√π h·ª£p cho: ${flower.occasion}`;
          
          // Find matching products
          const [products] = await pool.execute(
            `SELECT p.product_id, p.name, p.slug, p.price, p.description,
                    (SELECT image_url FROM product_images WHERE product_id = p.product_id AND is_primary = 1 LIMIT 1) as image_url
             FROM products p
             WHERE LOWER(p.name) LIKE ? AND p.is_active = 1 AND p.stock_quantity > 0
             LIMIT 4`,
            [`%${flower.flower_name.toLowerCase()}%`]
          );
          recommendations = products;
        } else {
          response = 'T√¥i c√≥ th·ªÉ t∆∞ v·∫•n v·ªÅ nhi·ªÅu lo·∫°i hoa nh∆∞: Hoa h·ªìng, Hoa ly, Hoa c√∫c, Hoa tulip, Hoa lan, Hoa h∆∞·ªõng d∆∞∆°ng, Hoa c·∫©m ch∆∞·ªõng... B·∫°n mu·ªën bi·∫øt v·ªÅ lo·∫°i hoa n√†o?';
        }
        break;

      case 'price':
        response = 'Gi√° hoa t·∫°i shop r·∫•t ƒëa d·∫°ng:\n\n' +
                   'üíê **Ph·ªï th√¥ng:** 100.000ƒë - 300.000ƒë\n' +
                   'üå∏ **Trung c·∫•p:** 300.000ƒë - 800.000ƒë\n' +
                   'üåπ **Cao c·∫•p:** 800.000ƒë - 2.000.000ƒë+\n\n' +
                   'B·∫°n c√≥ ng√¢n s√°ch bao nhi√™u? T√¥i s·∫Ω g·ª£i √Ω s·∫£n ph·∫©m ph√π h·ª£p!';
        break;

      case 'care':
        response = 'üå± **M·∫πo chƒÉm s√≥c hoa t∆∞∆°i l√¢u:**\n\n' +
                   '1. C·∫Øt ch√©o cu·ªëng hoa tr∆∞·ªõc khi c·∫Øm\n' +
                   '2. Thay n∆∞·ªõc s·∫°ch m·ªói 2-3 ng√†y\n' +
                   '3. ƒê·∫∑t b√¨nh hoa n∆°i tho√°ng m√°t, tr√°nh √°nh n·∫Øng tr·ª±c ti·∫øp\n' +
                   '4. C·∫Øt b·ªè l√° √∫a v√† hoa h√©o\n' +
                   '5. C√≥ th·ªÉ th√™m ƒë∆∞·ªùng ho·∫∑c aspirin v√†o n∆∞·ªõc\n\n' +
                   'B·∫°n mu·ªën bi·∫øt c√°ch chƒÉm s√≥c lo·∫°i hoa c·ª• th·ªÉ n√†o?';
        break;

      case 'meaning':
        response = 'üå∏ **√ù nghƒ©a c√°c lo√†i hoa ph·ªï bi·∫øn:**\n\n' +
                   'üåπ **Hoa h·ªìng:** T√¨nh y√™u, l√£ng m·∫°n\n' +
                   'üå∫ **Hoa ly:** Thu·∫ßn khi·∫øt, thanh l·ªãch\n' +
                   'üåº **Hoa c√∫c:** Vui v·∫ª, l·∫°c quan\n' +
                   'üå∑ **Hoa tulip:** T√¨nh y√™u ho√†n h·∫£o\n' +
                   'üåª **Hoa h∆∞·ªõng d∆∞∆°ng:** Ni·ªÅm vui, nƒÉng l∆∞·ª£ng\n' +
                   'üå∏ **Hoa lan:** Sang tr·ªçng, qu√Ω ph√°i\n\n' +
                   'B·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ lo·∫°i hoa n√†o?';
        break;

      case 'order':
        response = 'ƒê·ªÉ ƒë·∫∑t h√†ng, b·∫°n c√≥ th·ªÉ:\n\n' +
                   '1. üõí Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng\n' +
                   '2. üìù ƒêi·ªÅn th√¥ng tin giao h√†ng\n' +
                   '3. üí≥ Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n\n' +
                   '4. ‚úÖ X√°c nh·∫≠n ƒë∆°n h√†ng\n\n' +
                   'B·∫°n c·∫ßn t√¥i g·ª£i √Ω s·∫£n ph·∫©m kh√¥ng?';
        break;

      case 'help':
        response = 'T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n' +
                   'üå∏ T∆∞ v·∫•n ch·ªçn hoa theo d·ªãp\n' +
                   'üíê G·ª£i √Ω s·∫£n ph·∫©m ph√π h·ª£p\n' +
                   'üå∫ H∆∞·ªõng d·∫´n chƒÉm s√≥c hoa\n' +
                   'üåπ Gi·∫£i th√≠ch √Ω nghƒ©a hoa\n' +
                   'üí∞ T∆∞ v·∫•n gi√° c·∫£\n' +
                   'üì¶ H∆∞·ªõng d·∫´n ƒë·∫∑t h√†ng\n\n' +
                   'B·∫°n c·∫ßn gi√∫p ƒë·ª° v·ªÅ v·∫•n ƒë·ªÅ g√¨?';
        break;

      default:
        // Try to search in knowledge base
        const generalKnowledge = await this.searchFlowerKnowledge(message);
        if (generalKnowledge.length > 0) {
          const flower = generalKnowledge[0];
          response = `T√¥i t√¨m th·∫•y th√¥ng tin v·ªÅ **${flower.flower_name}**:\n\n` +
                     `${flower.meaning}\n\n` +
                     `Ph√π h·ª£p cho: ${flower.occasion}\n\n` +
                     `B·∫°n c√≥ mu·ªën xem s·∫£n ph·∫©m kh√¥ng?`;
          
          const [products] = await pool.execute(
            `SELECT p.product_id, p.name, p.slug, p.price, p.description,
                    (SELECT image_url FROM product_images WHERE product_id = p.product_id AND is_primary = 1 LIMIT 1) as image_url
             FROM products p
             WHERE LOWER(p.name) LIKE ? AND p.is_active = 1 AND p.stock_quantity > 0
             LIMIT 4`,
            [`%${flower.flower_name.toLowerCase()}%`]
          );
          recommendations = products;
        } else {
          response = 'T√¥i ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ:\n\n' +
                     '‚Ä¢ G·ª£i √Ω hoa cho d·ªãp ƒë·∫∑c bi·ªát\n' +
                     '‚Ä¢ √ù nghƒ©a c√°c lo√†i hoa\n' +
                     '‚Ä¢ C√°ch chƒÉm s√≥c hoa\n' +
                     '‚Ä¢ Gi√° c·∫£ s·∫£n ph·∫©m\n\n' +
                     'Ho·∫∑c b·∫°n c√≥ th·ªÉ n√≥i c·ª• th·ªÉ h∆°n v·ªÅ nhu c·∫ßu c·ªßa m√¨nh!';
        }
    }

    return {
      response,
      intent,
      confidence,
      recommendations
    };
  }
};

export default Chatbot;
